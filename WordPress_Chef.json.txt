{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "CloudFormation template creating a VPC which uses Chef to install WordPress",
  "Parameters" : {
    "InstanceType" : {
      "Description" : "Web Server EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
	"KeyName": {
      "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
	"AdminPass": {
      "Description": "WordPress Admin Password",
      "Type": "String",
      "Default": "AdminPass",
      "ConstraintDescription": "Must be a password string."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
    },
    "DBClass" : {
      "Description" : "Database instance class",
      "Type" : "String",
      "Default" : "db.t2.small",
      "AllowedValues" : [ "db.t2.micro", "db.t2.small"],
      "ConstraintDescription" : "must select a valid database instance type."
    },
    "DBName" : {
      "Default": "wordpressdb",
      "Description" : "The WordPress database nae",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUser" : {
      "NoEcho": "false",
      "Description" : "The WordPress database admin account user name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword" : {
      "NoEcho": "true",
      "Description" : "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "MultiAZDatabase": {
      "Default": "false",
      "Description" : "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },
    "WebServerCapacity": {
      "Default": "1",
      "Description" : "The initial nuber of web server instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription" : "must be between 1 and 5 EC2 instances."
    },
    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (GB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024 GB."
    }
  },
  "Mappings" : {
    "RegionMap": {
      "us-east-1": { "AMI": "ami-6869aa05" },
      "us-east-2": { "AMI": "ami-c55673a0" },
      "us-west-1": { "AMI": "ami-165a0876" },
      "us-west-2": { "AMI": "ami-f173cc91" }
    }
  },   
  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [
          { "Key": "Application", "Value": { "Ref": "AWS::StackId" } }
        ]
      }
    },
    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "VPC",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
		"AvailabilityZone" : "us-east-1a",
        "Tags" : [ { "Key": "Application", "Value": { "Ref": "AWS::StackId" } } ]
      }
    },	
	"Subnetb" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "VPC",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.1.0/24",
		"AvailabilityZone" : "us-east-1d",
        "Tags" : [ {"Key" : "Name", "Value" : "AWS::StackId" } ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ { "Key": "Application", "Value": { "Ref": "AWS::StackId" } } ]
      }
    },
     "VPCGatewayAttachment" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key": "Application", "Value": { "Ref": "AWS::StackId" } } ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGateway",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" }
        }
    },
    "NetworkAclEntryForInboundSSH" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "100" ,
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "PortRange": { "From":"22" , "To": "22" }
      }
    },
    "NetworkAclEntryForInboundEphemeral" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "101",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6" ,
        "PortRange": { "From":"1024" , "To": "65535" }
      }
    },
    "NetworkAclEntryForInbound80" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "103",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6" ,
        "PortRange": { "From":"80" , "To": "80" }
      }
    },
    "NetworkAclEntryForOutboundEphemeral" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "100",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6" ,
        "PortRange": { "From":"1024" , "To": "65535" }
      }
    },
    "NetworkAclEntryForOutboundHTTP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "102" ,
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "PortRange": { "From":"80" , "To": "80" }
      }
    },
    "NetworkAclEntryForOutboundHTTPS" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "103" ,
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "PortRange": { "From":"443" , "To": "443" }
      }
    },
    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "main security group",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "1024", "ToPort" : "65535", "CidrIp" : "10.0.0.0/24"}
        ]
      }
    },
    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata" : {
        "Comment1" : "Configure the Load Balancer with a simple health check and cookie-based stickiness",
        "Comment2" : "Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes"
      },
      "Properties" : {
        "CrossZone" : "true",
        "Subnets" : [{"Ref" : "Subnet"}],
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/wp-admin/install.php",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        }
      }
    },
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "WebServerCapacity" },
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "wordpress_install" : ["install_cfn", "install_chefdk", "install_chef", "install_wordpress", "run_chef"]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets wordpress_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },
          "install_chef" : {
            "sources" : {
              "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
            },
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /var/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/var/chef"
              },
              "03_create_node_list" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },
          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
              }
            }
          },
          "install_wordpress" : {
            "files" : {
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/cookbooks/wordpress/attributes/aws_rds_config.rb" : {
                "content": { "Fn::Join": [ "", [
                  "normal['wordpress']['db']['pass'] = '", {"Ref" : "DBPassword"}, "'\n",
                  "normal['wordpress']['db']['user'] = '", {"Ref" : "DBUser"}, "'\n",
                  "normal['wordpress']['db']['host'] = '", {"Fn::GetAtt" : ["DBInstance", "Endpoint.Address"]}, "'\n",
                  "normal['wordpress']['db']['name'] = '", {"Ref" : "DBName"}, "'\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_get_cookbook" : {
                "command" : "knife cookbook site download wordpress",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              },
              "02_unpack_cookbook" : {
                "command" : "tar xvfz /var/chef/chef-repo/wordpress*",
                "cwd" : "/var/chef/chef-repo/cookbooks"
              },
              "03_init_berkshelf": {
                "command" : "berks init /var/chef/chef-repo/cookbooks/wordpress --skip-vagrant --skip-git",
                "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
                "env" : { "HOME" : "/var/chef" }
              },
              "04_vendorize_berkshelf" : {
                "command" : "berks vendor",
                "cwd" : "/var/chef/chef-repo/cookbooks/wordpress",
                "env" : { "HOME" : "/var/chef" }
              },
              "05_configure_node_run_list" : {
                "command" : "knife node run_list add -z `knife node list -z` recipe[wordpress]",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },
          "run_chef" : {
            "commands" : {
              "01_run_chef_client" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap": ["RegionMap", { "Ref": "AWS::Region" }, "AMI"] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets wordpress_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServerGroup ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access",
		"VpcId" : {"Ref" : "VPC"},
		  "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306"          
        }]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",      
      "Properties": {
	  "EC2VpcId" : {"Ref" : "VPC"},
	  "DBSecurityGroupIngress": [
          { "EC2SecurityGroupId" : { "Fn::GetAtt" : [ "SecurityGroup", "GroupId" ] } }
        ],
	   "GroupDescription": "database access"
      }
    },	
  "myDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
          "DBSubnetGroupDescription" : "Subnet group to create db instance",
            "SubnetIds" : [{"Ref" : "Subnet"},{"Ref" : "Subnetb"}]
         }
      },  
  "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName"            : { "Ref" : "DBName" },        
        "DBSubnetGroupName" : { "Ref" : "myDBSubnetGroup"},
        "Engine"            : "MySQL",
        "MultiAZ"           : { "Ref": "MultiAZDatabase" },
        "MasterUsername"    : { "Ref" : "DBUser" },
        "DBInstanceClass"   : { "Ref" : "DBClass" },
        "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "VPCSecurityGroups": [{ "Fn::GetAtt": [ "DBEC2SecurityGroup", "GroupId" ] }],
        "DBSecurityGroups": [{ "Ref": "DBSecurityGroup" }]
	  }
    },
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
		 "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",
          "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },
  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]},
      "Description" : "WordPress website"
    }
  }
}